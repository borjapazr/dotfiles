{
  /*** Workbench settings ***/
  "workbench.activityBar.orientation": "vertical",
  "workbench.colorTheme": "Gruvbox Dark Medium",
  "workbench.editor.labelFormat": "short",
  "workbench.editor.languageDetection": true,
  "workbench.editor.pinnedTabsOnSeparateRow": true,
  "workbench.iconTheme": "catppuccin-mocha",
  "workbench.list.horizontalScrolling": true,
  "workbench.list.smoothScrolling": true,
  "workbench.productIconTheme": "fluent-icons",
  "workbench.settings.editor": "json",
  "workbench.sideBar.location": "left",
  "workbench.startupEditor": "none",
  "workbench.statusBar.visible": true,
  "workbench.tree.enableStickyScroll": true,
  "workbench.tree.indent": 20,
  "window.nativeFullScreen": true,
  "window.titleBarStyle": "custom",
  "search.useGlobalIgnoreFiles": true,
  "search.useIgnoreFiles": true,
  "breadcrumbs.enabled": true,
  "explorer.compactFolders": false,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,

  /*** Editor settings ***/
  "editor.acceptSuggestionOnEnter": "on",
  "editor.accessibilitySupport": "off",
  "editor.bracketPairColorization.enabled": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.fixAll.format": "explicit",
    "source.fixAll.htmlhint": "explicit",
    "source.fixAll.stylelint": "explicit",
    "source.organizeImports": "explicit"
  },
  "editor.cursorBlinking": "smooth",
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.cursorStyle": "line",
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.fontFamily": "Cascadia Code NF",
  "editor.fontLigatures": "'ss01', 'ss02', 'ss03', 'ss04', 'ss05', 'ss06', 'zero', 'onum', 'calt', 'ss01'",
  "editor.fontSize": 16,
  "editor.formatOnPaste": false,
  "editor.formatOnSave": true,
  "editor.guides.bracketPairs": true,
  "editor.inlineSuggest.enabled": true,
  "editor.language.colorizedBracketPairs": [
    ["[", "]"],
    ["(", ")"],
    ["{", "}"]
  ],
  "editor.lineHeight": 2.1,
  "editor.maxTokenizationLineLength": 50000,
  "editor.minimap.enabled": false,
  "editor.multiCursorModifier": "ctrlCmd",
  "editor.occurrencesHighlight": "multiFile",
  "editor.quickSuggestions": {
    "comments": true,
    "other": true,
    "strings": true
  },
  "editor.renderWhitespace": "all",
  "editor.rulers": [100],
  "editor.smoothScrolling": true,
  "editor.snippetSuggestions": "bottom",
  "editor.stickyScroll.enabled": true,
  "editor.suggestSelection": "first",
  "editor.tabCompletion": "on",
  "editor.tabSize": 2,
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "name": "italic font form special keywords",
        "scope": [
          "comment",
          "punctuation.definition.comment",
          "keyword",
          "storage.type",
          "storage.modifier",
          "meta.selector.css",
          "support.constant",
          "meta.property-value.css",
          "keyword.other.special-method.dockerfile",
          "entity.name.tag.yaml",
          "string.quoted.docstring.multi.python",
          "entity.name.function.decorator.python",
          "variable.parameter.function.language.special.self.python",
          "variable.language.special.self.python",
          "variable.language.this",
          "variable.language.super",
          "support.function.builtin.python",
          "source.python keyword.operator.logical.python",
          "source.pip-requirements",
          "source.pip-requirements entity.name.class",
          "variable.language",
          "entity.name.method.js",
          "entity.other.attribute-name",
          "entity.name.tag.structure.any.html",
          "entity.name.tag",
          "entity.name.tag.html",
          "punctuation.definition.tag.end.html",
          "punctuation.definition.tag.begin.html",
          "entity.other.attribute-name.class",
          "tag.decorator.js entity.name.tag.js",
          "tag.decorator.js punctuation.definition.tag.js",
          "source.js constant.other.object.key.js string.unquoted.label.js",
          "source.js keyword.operator.expression.in.js",
          "source.js keyword.operator.expression.of.js",
          "source.js keyword.operator.new",
          "source.css support.function",
          "source.css keyword.other.unit.fr.css",
          "source.json meta.structure.dictionary.json support.type.property-name.json",
          "markdown.heading",
          "markup.heading | markup.heading entity.name",
          "markup.heading.markdown punctuation.definition.heading.markdown",
          "markup.heading.markdown entity.name",
          "markup.italic",
          "markup.bold markup.italic",
          "markup.italic markup.bold",
          "markup.quote markup.bold",
          "markup.bold markup.italic string",
          "markup.italic markup.bold string",
          "markup.quote markup.bold string",
          "markup.quote"
        ],
        "settings": {
          "fontStyle": "italic"
        }
      },
      {
        "name": "normal font for colons",
        "scope": [
          "invalid",
          "keyword.operator.assignment",
          "keyword.operator.bitwise",
          "keyword.operator.type",
          "keyword.operator.logical",
          "keyword.operator.arithmetic",
          "constant.numeric.css",
          "keyword.other.unit.px.css",
          "constant.numeric.decimal.js",
          "constant.numeric.json"
        ],
        "settings": {
          "fontStyle": ""
        }
      }
    ]
  },
  "editor.wordWrap": "off",
  "multiDiffEditor.experimental.enabled": true,
  "errorLens.excludeBySource": ["cSpell"],

  /*** Terminal settings ***/
  "terminal.integrated.confirmOnExit": "always",
  "terminal.integrated.confirmOnKill": "always",
  "terminal.integrated.cursorStyle": "line",
  "terminal.integrated.fontFamily": "Cascadia Code NF",
  "terminal.integrated.fontLigatures.enabled": true,
  "terminal.integrated.fontSize": 16,
  "terminal.integrated.shellIntegration.enabled": true,
  "terminal.integrated.stickyScroll.enabled": true,
  "terminal.integrated.suggest.enabled": true,
  "debug.console.fontSize": 18,

  /*** Look and Feel settings ***/
  "oneDarkPro.bold": true,
  "oneDarkPro.italic": true,
  "oneDarkPro.vivid": true,
  "symbols.hidesExplorerArrows": false,

  /*** Files settings ***/
  "files.associations": {
    ".env*": "dotenv",
    "*.chatmode.md": "markdown",
    "*.instructions.md": "markdown",
    "*.prompt.md": "markdown"
  },
  "files.autoSave": "onFocusChange",
  "files.eol": "\n",
  "files.insertFinalNewline": true,
  "files.trimTrailingWhitespace": true,

  /*** Formatting and linting settings ***/
  "prettier.semi": true,
  "prettier.withNodeModules": true,

  /*** Git settings ***/
  "git-graph.tabIconColourTheme": "grey",
  "git.autofetch": true,
  "git.blame.editorDecoration.enabled": true,
  "git.blame.statusBarItem.enabled": true,
  "git.openRepositoryInParentFolders": "never",
  "githubPullRequests.pullBranch": "never",
  "gitlens.codeLens.authors.enabled": false,
  "gitlens.codeLens.recentChange.enabled": false,
  "gitlens.currentLine.enabled": false,
  "gitlens.defaultDateStyle": "absolute",
  "gitlens.statusBar.enabled": true,
  "scm.experimental.showHistoryGraph": true,

  /*** JavaScript/TypeScript settings ***/
  "javascript.inlayHints.enumMemberValues.enabled": true,
  "javascript.inlayHints.functionLikeReturnTypes.enabled": true,
  "javascript.inlayHints.parameterNames.enabled": "all",
  "javascript.inlayHints.parameterTypes.enabled": true,
  "javascript.inlayHints.propertyDeclarationTypes.enabled": true,
  "javascript.inlayHints.variableTypes.enabled": true,
  "javascript.updateImportsOnFileMove.enabled": "always",
  "typescript.inlayHints.enumMemberValues.enabled": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.parameterNames.enabled": "all",
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
  "typescript.inlayHints.variableTypes.enabled": true,
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "typescript.preferences.preferTypeOnlyAutoImports": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "jest.runMode": "on-demand",
  "playwright.env": {
    "NODE_ENV": "test"
  },
  "playwright.reuseBrowser": true,

  /*** Markdown settings ***/
  "markdown.preview.fontSize": 16,

  /*** GitHub Copilot Settings ***/
  // General settings
  "chat.commandCenter.enabled": true,
  "workbench.commandPalette.experimental.askChatLocation": "chatView",
  "search.searchView.semanticSearchBehavior": "manual",
  "search.searchView.keywordSuggestions": true,
  "workbench.settings.showAISearchToggle": true,
  // Code editing settings
  "github.copilot.editor.enableCodeActions": true,
  "github.copilot.renameSuggestions.triggerAutomatically": true,
  "github.copilot.enable": {
    "*": true,
    "markdown": true,
    "plaintext": true,
    "yaml": true
  },
  "github.copilot.nextEditSuggestions.enabled": true,
  // Chat settings
  "github.copilot.chat.localeOverride": "en",
  "github.copilot.chat.useProjectTemplates": true,
  "github.copilot.chat.scopeSelection": true,
  "github.copilot.chat.terminalChatLocation": "chatView",
  "github.copilot.chat.edits.suggestRelatedFilesFromGitHistory": true,
  // Agent mode settings
  "chat.agent.enabled": true,
  "chat.agent.maxRequests": 30,
  "github.copilot.chat.agent.autoFix": true,
  "github.copilot.chat.agent.runTasks": true,
  "chat.mcp.enabled": true,
  "github.copilot.chat.newWorkspaceCreation.enabled": true,
  "github.copilot.chat.agent.thinkingTool": true,
  // Inline chat settings
  "inlineChat.finishOnType": false,
  "inlineChat.holdToSpeech": true,
  "editor.inlineSuggest.syntaxHighlightingEnabled": true,
  "inlineChat.lineEmptyHint": false,
  "inlineChat.lineNaturalLanguageHint": true,
  "github.copilot.chat.editor.temporalContext.enabled": false,
  // Code review settings
  "github.copilot.chat.reviewSelection.enabled": true,
  "github.copilot.chat.reviewSelection.instructions": [],
  // Custom instructions settings
  "github.copilot.chat.codeGeneration.useInstructionFiles": true,
  "chat.instructionsFilesLocations": {
    ".github/instructions": true
  },
  "github.copilot.chat.commitMessageGeneration.instructions": [
    {
      "text": "Keep it simple stupid, follow that strictly. Use conventional commit message format. Remain consistent across commits no matter what. It doesn't have to be super strict, but it should be clear what the commit is doing. For example, use 'fix: bug in user login' instead of 'fixed a bug'. This helps in understanding the purpose of the commit at a glance. \n\nIf you're not sure about the format, you can check out the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) specification for more details. For a cheat sheet see [here](https://kapeli.com/cheat_sheets/Conventional_Commits.docset/Contents/Resources/Documents/index). Scopes, while useful, should only be used if needed. Otherwise just use the general commit message format. You will keep it simple and easy to understand. Shorter the better. Stay away from robotic phrases like enhance. You will limit to one line and short messages. \n\nExamples:\n- feat: update account settings\n- feat(auth): add forgot password logic\n- feat(dashboard): implement sku editor\n- style: linting\n- docs: update readme"
    },
    {
      "text": "Use conventional commit format with types like 'feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'perf:', 'test:', 'chore:' at the beginning of commit messages."
    },
    {
      "text": "Phrase the commit message as an action (e.g., 'implement feature', 'fix bug', 'update documentation')."
    },
    {
      "text": "Follow the Conventional Commits 1.0.0 specification (https://www.conventionalcommits.org/en/v1.0.0/)."
    }
  ],
  "github.copilot.chat.pullRequestDescriptionGeneration.instructions": [],
  // Reusable prompt files settings
  "chat.promptFiles": true,
  "chat.promptFilesLocations": {
    ".github/prompts": true
  },
  // Chat mode settings
  "chat.modeFilesLocations": {
    ".github/chatmodes": true
  },
  // Debugging settings
  "github.copilot.chat.startDebugging.enabled": true,
  "github.copilot.chat.copilotDebugCommand.enabled": true,
  // Testing settings
  "github.copilot.chat.generateTests.codeLens": true,
  "github.copilot.chat.setupTests.enabled": true,
  "docker.extension.enableComposeLanguageServer": false,

  /*** File specific settings ***/
  "[caddyfile]": {
    "editor.defaultFormatter": "matthewpi.caddyfile-support"
  },
  "[dockercompose]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker"
  },
  "[dockerfile]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[markdown]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "files.trimTrailingWhitespace": false
  },
  "[python]": {
    "editor.defaultFormatter": "charliermarsh.ruff"
  },
  "[shellscript]": {
    "editor.defaultFormatter": "foxundermoon.shell-format"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[yaml]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  /*** Extensions settings ***/
  "todo-tree.general.tags": [
    "BUG",
    "HACK",
    "FIXME",
    "TODO",
    "XXX",
    "[ ]",
    "[x]"
  ],
  "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
  "rapidapi.terminalLink.enabled": false,
  "redhat.telemetry.enabled": false,
  "remoteHub.uncommittedChangesOnEntry": "none"
}
